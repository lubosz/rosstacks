#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

## ROS message source code generation for C++
## 
## Converts ROS .msg files in a package into C++ source code implementations.

import roslib; roslib.load_manifest('roscpp')

import sys
import os
import traceback

# roslib.msgs contains the utilities for parsing .msg specifications. It is meant to have no rospy-specific knowledge
import roslib.msgs 
import roslib.packages
import roslib.gentools

from cStringIO import StringIO

MSG_TYPE_TO_CPP = {'byte': 'int8_t', 'char': 'uint8_t',
                   'bool': 'uint8_t',
                   'uint8': 'uint8_t', 'int8': 'int8_t', 
                   'uint16': 'uint16_t', 'int16': 'int16_t', 
                   'uint32': 'uint32_t', 'int32': 'int32_t',
                   'uint64': 'uint64_t', 'int64': 'int64_t',
                   'float32': 'float',
                   'float64': 'double',
                   'string': 'std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > ',
                   'time': 'ros::Time',
                   'duration': 'ros::Duration'}

def msg_type_to_cpp(type):
    (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
    cpp_type = None
    if (roslib.msgs.is_builtin(base_type)):
        cpp_type = MSG_TYPE_TO_CPP[base_type]
    elif (len(base_type.split('/')) == 1):
        if (roslib.msgs.is_header_type(base_type)):
            cpp_type = "roslib::Header_<ContainerAllocator> "
        else:
            cpp_type = '%s_<ContainerAllocator> '%(base_type)
    else:
        pkg = base_type.split('/')[0]
        msg = base_type.split('/')[1]
        cpp_type = '%s::%s_<ContainerAllocator> '%(pkg, msg)
        
    if (is_array):
        if (array_len is None):
            return 'std::vector<%s, typename ContainerAllocator::template rebind<%s>::other > '%(cpp_type, cpp_type)
        else:
            return 'boost::array<%s, %s> '%(cpp_type, array_len)
    else:
        return cpp_type
    
def cpp_message_declarations(name_prefix, msg):
    return ('%s%s_'%(name_prefix, msg), '%s%s_<ContainerAllocator> '%(name_prefix, msg), '%s%s'%(name_prefix, msg))

def write_begin(s, pkg, msg, file):
    s.write("/* Auto-generated by genmsg_cpp for file %s */\n"%(file))
    s.write('#ifndef %s_MESSAGE_%s_H\n'%(pkg.upper(), msg.upper()))
    s.write('#define %s_MESSAGE_%s_H\n'%(pkg.upper(), msg.upper()))
    
def write_end(s, pkg, msg):
    s.write('#endif // %s_MESSAGE_%s_H\n'%(pkg.upper(), msg.upper()))
    
def write_generic_includes(s):
    s.write('#include <string>\n')
    s.write('#include <vector>\n')
    s.write('#include "ros/serialization.h"\n')
    s.write('#include "ros/builtin_message_traits.h"\n')
    s.write('#include "ros/message.h"\n')
    s.write('#include "ros/time.h"\n\n')
    
def write_includes(s, spec, package):
    fields = spec.fields()
    for (type, name) in fields:
        (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
        if (not roslib.msgs.is_builtin(base_type)):
            if (roslib.msgs.is_header_type(base_type)):
                s.write('#include "roslib/Header.h"\n')
            else:
                (pkg, name) = roslib.names.package_resource_name(base_type)
                pkg = pkg or package # convert '' to package
                s.write('#include "%s/%s.h"\n'%(pkg, name))
                
    s.write('\n') 
    
    
def write_struct(s, spec, pkg, msg, cpp_name_prefix):
    s.write('template <class ContainerAllocator>\n')
    s.write('struct %s_ : public ros::Message\n{\n'%(msg))
    s.write('  typedef %s_<ContainerAllocator> Type;\n\n'%(msg))
    
    write_constructors(s, msg, spec, cpp_name_prefix)
    write_members(s, spec)
    write_constants(s, spec)
    write_deprecated_member_functions(s, spec, pkg, msg)
    
    (cpp_msg_unqualified, cpp_msg_with_alloc, cpp_msg_base) = cpp_message_declarations(cpp_name_prefix, msg)
    s.write('  typedef boost::shared_ptr<%s> Ptr;\n'%(cpp_msg_with_alloc))
    s.write('  typedef boost::shared_ptr<%s const> ConstPtr;\n'%(cpp_msg_with_alloc))
    s.write('}; // struct %s\n'%(msg))
    
    s.write('typedef %s_<std::allocator<void> > %s;\n\n'%(cpp_msg_base, msg))
    s.write('typedef boost::shared_ptr<%s> %sPtr;\n'%(cpp_msg_base, msg))
    s.write('typedef boost::shared_ptr<%s const> %sConstPtr;\n\n'%(cpp_msg_base, msg))

def default_value(type):
    if type in ['byte', 'int8', 'int16', 'int32', 'int64',
                'char', 'uint8', 'uint16', 'uint32', 'uint64']:
        return '0'
    elif type in ['float32', 'float64']:
        return '0.0'
    elif type == 'bool':
        return 'false'
        
    return ""

def takes_allocator(type):
    return not type in ['byte', 'int8', 'int16', 'int32', 'int64',
                        'char', 'uint8', 'uint16', 'uint32', 'uint64',
                        'float32', 'float64', 'bool', 'time', 'duration']

def write_initializer_list(s, spec, container_gets_allocator):
    fields = spec.fields()
    i = 0
    for (type, name) in fields:
        (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
        
        if (i == 0):
            s.write('  : ')
        else:
            s.write('  , ')
            
        val = default_value(base_type)
        use_alloc = takes_allocator(base_type)
        if (is_array):
            if (array_len is None and container_gets_allocator):
                s.write('%s(_alloc)\n'%(name))
            else:
                s.write('%s()\n'%(name))
        else:
            if (container_gets_allocator and use_alloc):
                s.write('%s(_alloc)\n'%(name))
            else:
                s.write('%s(%s)\n'%(name, val))
        i = i + 1
        
def write_fixed_length_assigns(s, spec, container_gets_allocator, cpp_name_prefix):
    fields = spec.fields()
    # Assign all fixed-length arrays their default values
    for (type, name) in fields:
        (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
        if (not is_array or array_len is None):
            continue
        
        val = default_value(base_type)
        if (container_gets_allocator and takes_allocator(base_type)):
            (cpp_msg_unqualified, cpp_msg_with_alloc, _) = cpp_message_declarations(cpp_name_prefix, base_type)
            s.write('    %s.assign(%s(_alloc));\n'%(name, cpp_msg_with_alloc))
        elif (len(val) > 0):
            s.write('    %s.assign(%s);\n'%(name, val))

def write_constructors(s, msg, spec, cpp_name_prefix):
    # Default constructor
    s.write('  %s_()\n'%(msg))
    write_initializer_list(s, spec, False)
    s.write('  {\n')
    write_fixed_length_assigns(s, spec, False, cpp_name_prefix)
    s.write('  }\n\n')
    
    # Constructor that takes an allocator constructor
    s.write('  %s_(const ContainerAllocator& _alloc)\n'%(msg))
    write_initializer_list(s, spec, True)
    s.write('  {\n')
    write_fixed_length_assigns(s, spec, True, cpp_name_prefix)
    s.write('  }\n\n')

def write_member(s, type, name):
    cpp_type = msg_type_to_cpp(type)
    s.write('  typedef %s _%s_type;\n'%(cpp_type, name))
    s.write('  %s %s;\n\n'%(cpp_type, name))

def write_members(s, spec):
    [write_member(s, type, name) for (type, name) in spec.fields()]
        
def write_constant(s, constant):
    if not constant.type in ['byte', 'int8', 'int16', 'int32', 'int64',
                'char', 'uint8', 'uint16', 'uint32', 'uint64',
                'float32', 'float64']:
        #raise ValueError('%s not supported as a constant'%(constant.type))
        return # TODO: strings
    
    s.write('  static const %s %s = %s;\n'%(msg_type_to_cpp(constant.type), constant.name, constant.val))
        
def write_constants(s, spec):
    [write_constant(s, constant) for constant in spec.constants]
    s.write('\n')
        
def is_fixed_length(spec, package):
    types = []
    fields = spec.fields()
    for (type, name) in fields:
        (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
        if (is_array and array_len is None):
            return False
        
        if (base_type == 'string'):
            return False
        
        if (not roslib.msgs.is_builtin(base_type)):
            types.append(base_type)
            
    types = set(types)
    for type in types:
        (pkg, name) = roslib.names.package_resource_name(type)
        pkg = pkg or package # convert '' to package
        type = roslib.msgs.resolve_type(type, pkg)
        (_, new_spec) = roslib.msgs.load_by_type(type, pkg)
        if (not is_fixed_length(new_spec, pkg)):
            return False
        
    return True
    
def write_deprecated_member_functions(s, spec, pkg, msg):
    fields = spec.fields()
    for (type, name) in fields:
        (base_type, is_array, array_len) = roslib.msgs.parse_type(type)
        if (is_array):
            s.write('  ROSCPP_DEPRECATED uint32_t get_%s_size() const { return (uint32_t)%s.size(); }\n'%(name, name))
            
            if (array_len is None):
                s.write('  ROSCPP_DEPRECATED void set_%s_size(uint32_t size) { %s.resize((size_t)size); }\n'%(name, name))
                s.write('  ROSCPP_DEPRECATED void get_%s_vec(%s& vec) const { vec = this->%s; }\n'%(name, msg_type_to_cpp(type), name))
                s.write('  ROSCPP_DEPRECATED void set_%s_vec(const %s& vec) { this->%s = vec; }\n'%(name, msg_type_to_cpp(type), name))
    # duplicate these here so we don't have to forward declare all the message traits
    gendeps_dict = roslib.gentools.get_dependencies(spec, pkg, compute_files=False)
    md5sum = roslib.gentools.compute_md5(gendeps_dict)
    full_text = compute_full_text_escaped(gendeps_dict)
    
    fields = spec.fields()
    s.write('  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return "%s/%s"; }\n'%(pkg,msg))
    s.write('  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return "%s"; }\n'%(md5sum))
    s.write('  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return "%s"; }\n'%(full_text))
    s.write('  ROSCPP_DEPRECATED virtual const std::string __getDataType() const { return __s_getDataType(); }\n')
    s.write('  ROSCPP_DEPRECATED virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }\n')
    s.write('  ROSCPP_DEPRECATED virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }\n')
    
    s.write('  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const\n  {\n')
    s.write('    ros::serialization::OStream stream(write_ptr, 1000000000);\n')
    for (type, name) in fields:
        s.write('    ros::serialization::serialize(stream, %s);\n'%(name))
    s.write('    return stream.getData();\n  }\n\n')
    
    s.write('  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)\n  {\n')
    s.write('    ros::serialization::IStream stream(read_ptr, 1000000000);\n');
    for (type, name) in fields:
        s.write('    ros::serialization::deserialize(stream, %s);\n'%(name))
    s.write('    return stream.getData();\n  }\n\n')
    
    s.write('  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const\n  {\n')
    s.write('    uint32_t size = 0;\n');
    for (type, name) in fields:
        s.write('    size += ros::serialization::serializationLength(%s);\n'%(name))
    s.write('    return size;\n  }\n\n')

def compute_full_text_escaped(gen_deps_dict):
    """
    Same as roslib.gentools.compute_full_text, except that the
    resulting text is escaped to be safe for C++ double quotes

    @param get_deps_dict: dictionary returned by get_dependencies call
    @type  get_deps_dict: dict
    @return: concatenated text for msg/srv file and embedded msg/srv types. Text will be escaped for double quotes
    @rtype: str
    """
    definition = roslib.gentools.compute_full_text(gen_deps_dict)
    lines = definition.split('\n')
    s = StringIO()
    for line in lines:
        line = line.replace('\\', '\\\\')
        line = line.replace('"', '\\"')
        s.write('%s\\n \\\n'%(line))
        
    val = s.getvalue()
    s.close()
    return val

def is_hex_string(str):
    for c in str:
        if c not in '0123456789abcdefABCDEF':
            return False
        
    return True

def write_trait_char_class(s, class_name, cpp_msg_with_alloc, value, write_static_hex_value = False):
    s.write('template<class ContainerAllocator>\nstruct %s<%s> {\n'%(class_name, cpp_msg_with_alloc))
    s.write('  static const char* value() \n  {\n    return "%s";\n  }\n\n'%(value))
    s.write('  static const char* value(const %s&) { return value(); } \n'%(cpp_msg_with_alloc))
    if (write_static_hex_value):
        if (not is_hex_string(value)):
            raise ValueError('%s is not a hex value'%(value))
        
        iter_count = len(value) / 16
        for i in xrange(0, iter_count):
            start = i*16
            s.write('  static const uint64_t static_value%s = 0x%sULL;\n'%((i+1), value[start:start+16]))
    s.write('};\n\n')
    
def write_trait_true_class(s, class_name, cpp_msg_with_alloc):
    s.write('template<class ContainerAllocator> struct %s<%s> : public TrueType {};\n'%(class_name, cpp_msg_with_alloc))

def write_traits(s, spec, pkg, msg, cpp_name_prefix, datatype = None):
    # generate dependencies dictionary
    gendeps_dict = roslib.gentools.get_dependencies(spec, pkg, compute_files=False)
    md5sum = roslib.gentools.compute_md5(gendeps_dict)
    full_text = compute_full_text_escaped(gendeps_dict)
    
    if (datatype is None):
        datatype = '%s/%s'%(pkg, msg)
    
    (cpp_msg_unqualified, cpp_msg_with_alloc, _) = cpp_message_declarations(cpp_name_prefix, msg)
    s.write('namespace ros\n{\n')
    s.write('namespace message_traits\n{\n')
    write_trait_char_class(s, 'MD5Sum', cpp_msg_with_alloc, md5sum, True)
    write_trait_char_class(s, 'DataType', cpp_msg_with_alloc, datatype)
    write_trait_char_class(s, 'Definition', cpp_msg_with_alloc, full_text)
    
    if (spec.has_header()):
        write_trait_true_class(s, 'HasHeader', cpp_msg_with_alloc)
        
    if (is_fixed_length(spec, pkg)):
        write_trait_true_class(s, 'IsFixedSize', cpp_msg_with_alloc)
        
    s.write('\n')
        
    s.write('} // namespace message_traits\n')
    s.write('} // namespace ros\n\n')
    
def write_serialization(s, spec, pkg, msg, cpp_name_prefix):
    (cpp_msg_unqualified, cpp_msg_with_alloc, _) = cpp_message_declarations(cpp_name_prefix, msg)
    fields = spec.fields()
    
    s.write('namespace ros\n{\n')
    s.write('namespace serialization\n{\n\n')
    
    s.write('template<class ContainerAllocator> struct Serializer<%s>\n{\n'%(cpp_msg_with_alloc))
    
    s.write('  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)\n  {\n')
    for (type, name) in fields:
        s.write('    stream.next(m.%s);\n'%(name))
    s.write('  }\n\n')
    
    s.write('  ROS_DECLARE_ALLINONE_SERIALIZER;\n')
    
    s.write('}; // struct %s\n'%(msg))
        
    s.write('} // namespace serialization\n')
    s.write('} // namespace ros\n\n')

def generate(msg_path):
    (package_dir, package) = roslib.packages.get_dir_pkg(msg_path)
    (name, spec) = roslib.msgs.load_from_file(msg_path)
    
    s = StringIO()  
    write_begin(s, package, name, msg_path)
    write_generic_includes(s)
    write_includes(s, spec, package)
    
    cpp_prefix = '%s::'%(package)
    
    s.write('namespace %s\n{\n'%(package))
    write_struct(s, spec, package, name, cpp_prefix)
    s.write('} // namespace %s\n\n'%(package))
    
    write_traits(s, spec, package, name, cpp_prefix)
    write_serialization(s, spec, package, name, cpp_prefix)
    write_end(s, package, name)
    
    output_dir = '%s/msg_gen/cpp/include/%s'%(package_dir, package)
    if (not os.path.exists(output_dir)):
        # if we're being run concurrently, the above test can report false but os.makedirs can still fail if
        # another copy just created the directory
        try:
            os.makedirs(output_dir)
        except OSError, e:
            pass
        
    f = open('%s/%s.h'%(output_dir, name), 'w')
    print >> f, s.getvalue()
    
    s.close()

def generate_messages(argv):
    for arg in argv[1:]:
        generate(arg)

if __name__ == "__main__":
    roslib.msgs.set_verbose(False)
    generate_messages(sys.argv)

